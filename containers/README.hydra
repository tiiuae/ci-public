  Copyright 2023 TII (SSRC) and the Ghaf contributors
  SPDX-License-Identifier: CC-BY-SA-4.0


Custom configuration can be done in confs/hydra.local
See confs/hydra.default for the values that can be adjusted.


To create hydra container:
./build_hydra.sh [uid=current uid] [gid=current gid] [debug=false]
The uid and the gid of the hydra user inside the container
should be such that they have write permissions to the external
persistent store.

Store gets initialized at the first container run.
Store directory should not exist beforehand.
Set path to hydractl.py to environment variable HYDRACTL
./run_hydra.sh [store directory]

Regular (second and later) container run:
./run_hydra.sh [store directory] [/srv directory] [debug=false]
Hydra interface is available at "http://localhost:3000"
Admin username is 'hydra'
The directory to mount as volume under "/srv" in the container
is completely optional, but it can be handy for making
local builds as one can have their sources anywhere in the
host system and just refer to them via /srv in the container.


If you have debug version of the container, you can make
it to run custom script instead of the normal one running
hydra services.
Place your script as [store]/nix/var/nix/external_script
and give "true" as the third parameter to ./run_hydra.sh


 ----

Hydra can upload built packages to the binary cache.

Currently this needs to be set up by placing files to
persistent storage.

- home/confs/binarycache.conf should be a shell fragment
  setting environment variables CACHE_SERVER, CACHE_SSH_KEY_FILE and optionally
  CACHE_PORT.
  Please see example-binarycache.conf for details.

 ----

Hydra can upload images to the web server.

Currently this needs to be set up by placing files to
persistent storage.

- home/confs/webserver.conf should be a shell fragment
  setting environment variables WEB_SERVER, WEB_SFTP_USER, WEB_SFTP_KEY_FILE,
  WEB_TRIG_USER, WEB_TRIG_KEY_FILE and optionally WEB_PROTO, WEB_PORT and WEB_SSH_PORT.
  Please see example-webserver.conf for details

 ----

Hydra can sign packages it builds.

Currently this needs to be set up by placing files to
persistent storage.

- home/confs/signing.conf should be a shell fragment
  setting environment variables SIGNING_SRV, SIGNING_SRV_KEY_FILE,
  SIGNING_SRV_PATH, SIGNING_SRV_USER, and optionally SIGNING_PORT.
  Please see example-signing.conf for details.

 ----

For various ssh connections (e.g. signing, web upload) to work, the servers
need to be in known_hosts inside the container.

To enable known_hosts generation you need to need to set HC_KNOWN_HOSTS to
a list of hosts ssh will connect with in your hydra.local configuration file.

Entry format: "<server dns name or IP>:<server ssh port>"
For example:
HC_KNOWN_HOSTS=("serv1.dom:22" "172.0.0.1:4321")

Note that even standard ssh port 22 needs to be indicated explicitly.

Note that if server names are not available on DNS, you probably need to have
also entries in HC_CUSTOM_HOSTS.

Note that host keys are not added automatically for names and ip-addresses,
so add entries exactly how you're configuring the server in other config.

This will actually connect to the servers listed at the time of running
run_hydra.sh. Make sure hostname lookups work on your host server. (e.g.
/etc/hosts is up to date)

This is only done when there is no known_hosts file present, to refresh
the host keys, you need to delete "<store>/home/.ssh/known_hosts" -file
before running run_hydra.sh

 ----

Hydra supports messaging to Slack channel. One needs first to create new Slack app
with write rights (https://api.slack.com/apps) and storing given auth token to safe
private place. Then Slack app must be installed to Slack workspace and to channel to
be used for build information messages.

Configuration file slack.conf need to be created and stored manually to /store/home/confs/.
File content need to be the following:
line1: Secret Slack auth token
line2: Name of the Slack channel to be messaged

Messager.py implements actual message sending and it is defined to be the current messaging
tool using env variable POSTBUILD_MSGSCRIPT in the run.sh (container booting code)

 ----

Hydra store versions:

0 - Version undefined, these stores should have "populated" flag
1 - Older hydra builds
2 - Hydra based on nix-23.05
