  Copyright 2023 TII (SSRC) and the Ghaf contributors
  SPDX-License-Identifier: CC-BY-SA-4.0


Custom configuration can be done in confs/hydra.local
See confs/hydra.default for the values that can be adjusted.


To create hydra container:
./build_hydra.sh [uid=current uid] [gid=current gid] [debug=false]
The uid and the gid of the hydra user inside the container
should be such that they have write permissions to the external
persistent store.

Store gets initialized at the first container run.
Store directory should not exist beforehand.
Set path to hydractl.py to environment variable HYDRACTL
./run_hydra.sh [store directory]

Regular (second and later) container run:
./run_hydra.sh [store directory] [/srv directory] [debug=false]
Hydra interface is available at "http://localhost:3000"
Admin username is 'hydra'
The directory to mount as volume under "/srv" in the container
is completely optional, but it can be handy for making
local builds as one can have their sources anywhere in the
host system and just refer to them via /srv in the container.


If you have debug version of the container, you can make
it to run custom script instead of the normal one running
hydra services.
Place your script as [store]/nix/var/nix/external_script
and give "true" as the third parameter to ./run_hydra.sh


 ----

Hydra can upload built packages to the binarycache.
Currently this needs to be set up by placing files
home/upload_ip.txt and home/.ssh/key within the persistent storage.
First one should have one line telling address of the binarycache,
and the second one is the private key to establish the connection.

Optional third file home/upload_port.txt should contain the
port to connect to.

 ----

Hydra can upload images to the webserver.
Currently this needs to be set up by placing files
home/webserver_ip.txt, home/.ssh/websrv_tftp_key,
and home/.ssh/websrv_trigger_key within the persistent storage.
First one should have one line telling address of the webserver,
and two latter ones are the private keys to establish the connection.

Currently webserver upload is supported in setups where also binarycache
upload has been activated.

----

Hydra supports messaging to Slack channel. One needs first to create new Slack app
with write rights (https://api.slack.com/apps) and storing given auth token to safe
private place. Then Slack app must be installed to Slack workspace and to channel to
be used for build information messages.

Configuration file slack_config need to be created and stored manually to /store/home/.
File content need to be the following:
line1: Secret Slack auth token
line2: Name of the Slack channel to be messaged

Messager.py implements actual message sending and it is defined to be the current messaging
tool using env variable POSTBUILD_MSGSCRIPT in the run.sh (container booting code)


----

Hydra store versions:

0 - Version undefined, these stores should have "populated" flag
1 - Older hydra builds
2 - Hydra based on nix-23.05
