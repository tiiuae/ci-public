#!groovy
// SPDX-FileCopyrightText: 2022-2023 Technology Innovation Institute (TII)
// SPDX-License-Identifier: Apache-2.0

resultsPath = ''
nucProcessingJob = ''
orinProcessingJob = ''
line = ''

pipeline {
    agent {label 'tc-agent02'}
    stages {
        stage('Set variables') {
            steps {
                script {
                    if (params.development) {
                         resultsPath = "/home/tc-agent02/Jenkins-agent/workspace/results/development/${params.server}"
                    } else {
                         resultsPath = "/home/tc-agent02/Jenkins-agent/workspace/results/${params.server}"
                    }
                    def splitted = "${JOB_NAME}".split('/')
                    line = "${splitted[0]}"
                    nucProcessingJob = "${line}/post_processing_nuc"
                    orinProcessingJob = "${line}/post_processing_orin"
                }
             }
        }
        stage('Remove old working list') {
            steps {
                script {
                    try {
                        // revome old worklist if exist
                        sh 'rm -rf wlist.txt'
                    }  catch(err) {
                        println("Old worklist do not exist")
                    }
                }
            }
        }
        stage('hydrascrape') {
            environment {
                PATH="$PATH:/nix/var/nix/profiles/default/bin/"
            }
            steps {
                script {
                    sh "python3 hydrascrape/hydrascrape.py hydra.vedenemo.dev ${params.project} ${params.jobset} handled_builds "+ '\'python3 hydrascrape/action.py\''
                }
            }
        }
        stage('Post Processing') {
            steps {
                script {
                    println("LINE::: ${line}")
                    if (!fileExists('wlist.txt')) {
                        println("Nothing new to process!")
                        return
                    }
                    def storepaths = readFile(file: 'wlist.txt')
                    storepaths.split('\n').each{ String line ->
                        def data = line.split(':')


                        // Get postBuild Data from .json
                        def buildData = readJSON file: "${data[0]}.json"
                        println("BuildID: ${data[0]} Store path: ${buildData['Output store paths'][0]}")

                        // Make directory and copy buildID.json there
                        sh "mkdir -p ${resultsPath}/${data[0]}"
                        sh "cp ${data[0]}.json ${resultsPath}/${data[0]}/"

                        if ("${buildData['Job']}".contains("orin")) {
                            //Trigger Orin post processing pipeline
                            try {
                                build job: "${orinProcessingJob}", parameters: [
                                    [$class: 'StringParameterValue', name: 'image', value: "${buildData['Output store paths'][0]}/nixos.img"],
                                    [$class: 'StringParameterValue', name: 'buildID', value: "${data[0]}"],
                                    [$class: 'StringParameterValue', name: 'resultsPath', value: "${resultsPath}"],
                                    [$class: 'StringParameterValue', name: 'server', value: "${params.server}"],
                                    [$class: 'StringParameterValue', name: 'project', value: "${buildData['Project']}"],
                                    [$class: 'StringParameterValue', name: 'line', value: "${line}"],
                                    [$class: 'BooleanParameterValue', name: 'development', value: params.development]
                                ]
                            }catch (err) {
                                println("Something went wrong at post processing of: ${data[0]} failed: ${err}")
                            }
                        // } else if ("${buildData['Job']}".contains("generic-x86")) {
                        //     //Trigger generic-x86_64 post processing pipeline
                        //     try {
                        //         build job: "${nucProcessingJob}", parameters: [
                        //             [$class: 'StringParameterValue', name: 'image', value: "${buildData['Output store paths'][0]}/nixos.img"],
                        //             [$class: 'StringParameterValue', name: 'buildID', value: "${data[0]}"],
                        //             [$class: 'StringParameterValue', name: 'resultsPath', value: "${resultsPath}"],
                        //             [$class: 'StringParameterValue', name: 'server', value: "${params.server}"],
                        //             [$class: 'StringParameterValue', name: 'project', value: "${buildData['Project']}"]
                        //         ]
                        //     }catch (err) {
                        //         println("Something went wrong at post processing of: ${data[0]} failed: ${err}")
                        //     }
                        // } else if ("${buildData['Job']}".contains("nuc")) {
                        //     //Trigger NUC post processing pipeliner
                        //     try {
                        //         build job: "${nucProcessingJob}", parameters: [
                        //             [$class: 'StringParameterValue', name: 'image', value: "${buildData['Output store paths'][0]}/nixos.img"],
                        //             [$class: 'StringParameterValue', name: 'buildID', value: "${data[0]}"],
                        //             [$class: 'StringParameterValue', name: 'resultsPath', value: "${resultsPath}"],
                        //             [$class: 'StringParameterValue', name: 'server', value: "${params.server}"],
                        //             [$class: 'StringParameterValue', name: 'project', value: "${buildData['Project']}"]
                        //         ]
                        //     }catch (err) {
                        //         println("Something went wrong at post processing of: ${data[0]} failed: ${err}")
                        //     }
                        } else {
                            println("Build was not from wanted job")
                        }
                    }
                }
            }
        }

    }

}
