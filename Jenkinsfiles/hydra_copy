#!groovy
// SPDX-FileCopyrightText: 2022-2023 Technology Innovation Institute (TII)
// SPDX-License-Identifier: Apache-2.0

resultsPath = ''
processingJob = ''

pipeline {
    agent {label "${params.label}"}
    stages {
        stage('Set variables') {
            steps {
                script {
                    if (params.development) {
                         resultsPath = "/home/${params.label}/Jenkins-agent/workspace/results/development/${params.server}"
                    } else {
                         resultsPath = "/home/${params.label}/Jenkins-agent/workspace/results/${params.server}"
                    }
                    def splitted = "${JOB_NAME}".split('/')
                    processingJob = "${splitted[0]}/post_processing"
                }
             }
        }
        stage('Remove old working list') {
            steps {
                script {
                    try {
                        // revome old worklist if exist
                        sh 'rm -rf wlist.txt'
                    }  catch(err) {
                        println("Old worklist do not exist")
                    }
                }
            }
        }
        stage('hydrascrape') {
            environment {
                PATH="$PATH:/nix/var/nix/profiles/default/bin/"
            }
            steps {
                script {
                    sh "python3 hydrascrape/hydrascrape.py ${params.server}.vedenemo.dev ${params.project} ${params.jobset} handled_builds_${params.server} "+ '\'python3 hydrascrape/action.py\''
                }
            }
        }
        stage('Post Processing') {
            steps {
                script {
                    if (!fileExists('wlist.txt')) {
                        println("Nothing new to process!")
                        return
                    }
                    def storepaths = readFile(file: 'wlist.txt')
                    storepaths.split('\n').each{ String line ->
                        def data = line.split(':')
                        def buildId = data[0]

                        // Get postBuild Data from .json
                        def buildData = readJSON file: "${params.server}.vedenemo.dev/${buildId}.json"
                        def outputPath = "${buildData['Outputs'][0]['output']}"
                        println("BuildID: ${buildId} Output path: ${outputPath}")

                        // Make directory and copy buildID.json there
                        sh "mkdir -p ${resultsPath}/${buildId}"

                        // copy files
                        sh "cp ${params.server}.vedenemo.dev/${buildId}.json ${resultsPath}/${buildId}/"
                        // -n option to not overwrite, because the provenance file is not overwritable
                        // due to coming from nix store and thus being read-only
                        sh "cp -n ${buildData['Provenance']['path']} ${resultsPath}/${buildId}/"

                        if ("${buildData['Job']}".contains("orin-agx")) {
                            try {
                                build job: "${processingJob}", parameters: [
                                    [$class: 'StringParameterValue', name: 'outputPath', value: "${outputPath}"],
                                    [$class: 'StringParameterValue', name: 'buildID', value: "${buildId}"],
                                    [$class: 'StringParameterValue', name: 'resultsPath', value: "${resultsPath}"],
                                    [$class: 'StringParameterValue', name: 'server', value: "${params.server}"],
                                    [$class: 'StringParameterValue', name: 'project', value: "${buildData['Project']}"],
                                    [$class: 'BooleanParameterValue', name: 'development', value: params.development],
                                    [$class: 'BooleanParameterValue', name: 'hw_tests', value: true],
                                    [$class: 'StringParameterValue', name: 'label', value: "${params.label}"],
                                    [$class: 'StringParameterValue', name: 'device', value: "orin-agx"],
                                    [$class: 'BooleanParameterValue', name: 'upload', value: params.upload]
                                ]
                            } catch (err) {
                                println("Something went wrong at post processing of: ${buildId} failed: ${err}")
                            }
                        } else if ("${buildData['Job']}".contains("orin-nx")) {
                            try {
                                build job: "${processingJob}", parameters: [
                                    [$class: 'StringParameterValue', name: 'outputPath', value: "${outputPath}"],
                                    [$class: 'StringParameterValue', name: 'buildID', value: "${buildId}"],
                                    [$class: 'StringParameterValue', name: 'resultsPath', value: "${resultsPath}"],
                                    [$class: 'StringParameterValue', name: 'server', value: "${params.server}"],
                                    [$class: 'StringParameterValue', name: 'project', value: "${buildData['Project']}"],
                                    [$class: 'BooleanParameterValue', name: 'development', value: params.development],
                                    [$class: 'BooleanParameterValue', name: 'hw_tests', value: true],
                                    [$class: 'StringParameterValue', name: 'label', value: "${params.label}"],
                                    [$class: 'StringParameterValue', name: 'device', value: "orin-nx"],
                                    [$class: 'BooleanParameterValue', name: 'upload', value: params.upload]
                                ]
                            } catch (err) {
                                println("Something went wrong at post processing of: ${buildId} failed: ${err}")
                            }
                        } else if ("${buildData['Job']}".contains("generic-x86")) {
                            try {
                                build job: "${processingJob}", parameters: [
                                    [$class: 'StringParameterValue', name: 'outputPath', value: "${outputPath}"],
                                    [$class: 'StringParameterValue', name: 'buildID', value: "${buildId}"],
                                    [$class: 'StringParameterValue', name: 'resultsPath', value: "${resultsPath}"],
                                    [$class: 'StringParameterValue', name: 'server', value: "${params.server}"],
                                    [$class: 'StringParameterValue', name: 'project', value: "${buildData['Project']}"],
                                    [$class: 'BooleanParameterValue', name: 'development', value: params.development],
                                    [$class: 'BooleanParameterValue', name: 'hw_tests', value: true],
                                    [$class: 'StringParameterValue', name: 'label', value: "${params.label}"],
                                    [$class: 'StringParameterValue', name: 'device', value: "nuc"],
                                    [$class: 'BooleanParameterValue', name: 'upload', value: params.upload]
                                ]
                            } catch (err) {
                                println("Something went wrong at post processing of: ${buildId} failed: ${err}")
                            }
                        } else if ("${buildData['Job']}".contains("microchip-icicle-kit-debug-from-x86_64")) {
                            try {
                                build job: "${processingJob}", parameters: [
                                    [$class: 'StringParameterValue', name: 'outputPath', value: "${outputPath}"],
                                    [$class: 'StringParameterValue', name: 'buildID', value: "${buildId}"],
                                    [$class: 'StringParameterValue', name: 'resultsPath', value: "${resultsPath}"],
                                    [$class: 'StringParameterValue', name: 'server', value: "${params.server}"],
                                    [$class: 'StringParameterValue', name: 'project', value: "${buildData['Project']}"],
                                    [$class: 'BooleanParameterValue', name: 'development', value: params.development],
                                    [$class: 'BooleanParameterValue', name: 'hw_tests', value: true],
                                    [$class: 'StringParameterValue', name: 'label', value: "${params.label}"],
                                    [$class: 'StringParameterValue', name: 'device', value: "riscv"],
                                    [$class: 'BooleanParameterValue', name: 'upload', value: params.upload]
                                ]
                            } catch (err) {
                                println("Something went wrong at post processing of: ${buildId} failed: ${err}")
                            }
                        } else if ("${buildData['Job']}".contains("lenovo-x1-carbon")) {
                            try {
                                build job: "${processingJob}", parameters: [
                                    [$class: 'StringParameterValue', name: 'outputPath', value: "${outputPath}"],
                                    [$class: 'StringParameterValue', name: 'buildID', value: "${buildId}"],
                                    [$class: 'StringParameterValue', name: 'resultsPath', value: "${resultsPath}"],
                                    [$class: 'StringParameterValue', name: 'server', value: "${params.server}"],
                                    [$class: 'StringParameterValue', name: 'project', value: "${buildData['Project']}"],
                                    [$class: 'BooleanParameterValue', name: 'development', value: params.development],
                                    [$class: 'BooleanParameterValue', name: 'hw_tests', value: true],
                                    [$class: 'StringParameterValue', name: 'label', value: "${params.label}"],
                                    [$class: 'StringParameterValue', name: 'device', value: "lenovo-x1"],
                                    [$class: 'BooleanParameterValue', name: 'upload', value: params.upload]
                                ]
                            } catch (err) {
                                println("Something went wrong at post processing of: ${buildId} failed: ${err}")
                            }
                        } else if ("${buildData['Job']}".contains("fmo-os")) {
                            try {
                                build job: "${processingJob}", parameters: [
                                    [$class: 'StringParameterValue', name: 'outputPath', value: "${outputPath}"],
                                    [$class: 'StringParameterValue', name: 'buildID', value: "${buildId}"],
                                    [$class: 'StringParameterValue', name: 'resultsPath', value: "${resultsPath}"],
                                    [$class: 'StringParameterValue', name: 'server', value: "${params.server}"],
                                    [$class: 'StringParameterValue', name: 'project', value: "${buildData['Project']}"],
                                    [$class: 'BooleanParameterValue', name: 'development', value: params.development],
                                    [$class: 'BooleanParameterValue', name: 'hw_tests', value: false],
                                    [$class: 'StringParameterValue', name: 'label', value: "${params.label}"],
                                    [$class: 'StringParameterValue', name: 'device', value: "fmo-os"],
                                    [$class: 'BooleanParameterValue', name: 'upload', value: params.upload]
                                ]
                            } catch (err) {
                                println("Something went wrong at post processing of: ${buildId} failed: ${err}")
                            }
                        } else {
                            println("Build was not from wanted job")
                        }
                    }
                }
            }
        }

    }

}
