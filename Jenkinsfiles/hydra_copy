#!groovy
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2022-2023 Ville-Pekka Juntunen <ville-pekka.juntunen@unikie.com>
// SPDX-FileCopyrightText: 2022-2023 Unikie
// SPDX-FileCopyrightText: 2022-2023 Technology Innovation Institute (TII)

resultsPath = '/home/tc-agent02/Jenkins-agent/workspace/results'
imagesPath = '/home/tc-agent02/Jenkins-agent/workspace/images/'
processingJob = 'nixOS/post_processing_nuc'

pipeline {
    agent {label 'tc-agent02'}
    stages {
        stage('Remove old working list') {
            steps {
                script {
                    try {
                        // revome old worklist if exist
                        sh 'rm -rf wlist.txt'
                    }  catch(err) {
                        println("Old worklist do not exist")
                    }
                }
            }
        }
        // stage('clone ci-public') {
        //     steps {
        //         script {
        //             try {
        //                 sh 'git clone https://github.com/tiiuae/ci-public.git'
        //             }  catch(err) {
        //                 println("Repo is already cloned")
        //             }
        //         }
        //     }
        // }
        // stage('Pull repository') {
        //     steps {
        //       dir('ci-public/'){
        //         sh 'git pull'
        //        }
        //     }
        // }
        stage('hydrascrape') {
            environment {
                PATH="$PATH:/nix/var/nix/profiles/default/bin/"
            }
            steps {
                script {
                    sh "python3 hydrascrape/hydrascrape.py hydra.vedenemo.dev ${params.project} ${params.jobset} handled_builds "+ '\'python3 hydrascrape/action.py\''
                }
            }
        }
        stage('Post Processing') {
            steps {
                script {
                    if (!fileExists('wlist.txt')) {
                        println("Nothing new to process!")
                        return
                    }
                    def storepaths = readFile(file: 'wlist.txt')
                    storepaths.split('\n').each{ String line ->
                        def data = line.split(':')


                        // Get postBuild Data from .json
                        def buildData = readJSON file: "${data[0]}.json"
                        println("BuildID: ${data[0]} Store path: ${buildData['Output store paths'][0]}")

                        // Make directory and copy buildID.json there
                        sh "mkdir ${resultsPath}/${data[0]}"
                        sh "cp ${data[0]}.json ${resultsPath}/${data[0]}/"

                        if ("${buildData['Job']}".contains("nuc")) {
                            //Trigger post processing pipeline
                            try {
                                build job: "${processingJob}", parameters: [[$class: 'StringParameterValue', name: 'image', value: "${buildData['Output store paths'][0]}/nixos.img"], [$class: 'StringParameterValue', name: 'buildID', value: "${data[0]}"], [$class: 'StringParameterValue', name: 'resultsPath', value: "${resultsPath}"]]
                            }catch (err) {
                                println("Something went wrong at post processing of: ${data[0]} failed: ${err}")
                            }
                        } else {
                            println("Build was not from wanted job")
                        }
                    }
                }
            }
        }

    }

}
