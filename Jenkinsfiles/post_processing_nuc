#!groovy
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2022-2023 Ville-Pekka Juntunen <ville-pekka.juntunen@unikie.com>
// SPDX-FileCopyrightText: 2022-2023 Unikie
// SPDX-FileCopyrightText: 2022-2023 Technology Innovation Institute (TII)

buildResults = [:]

vulnixJob = 'Spectrum_OS/Supply_chain_security/vulnix'
nucJob = 'Spectrum_OS/Testing/NUC_x86/nuc_x86_test_set'

pipeline {
    //agent {label 'NotInUse'}
    agent {label 'tc-agent02'}
    stages {
        stage('clone spectrum-jenkins') {
            steps {
                script {
                    // Set pipeline description
                    currentBuild.description = "Hydra BuildID: ${params.buildID}"
                    try {
                        sh 'git clone https://github.com/tiiuae/spectrum-jenkins.git'
                    }  catch(err) {
                        println("Repo is already cloned")
                    }
                }
            }
        }
        stage('Pull repository') {
            steps {
              dir('spectrum-jenkins/'){
                sh 'git pull'
               }
            }
        }
        stage('vulnix') {
            steps {
                script {
                    build = build(
                        job: "${vulnixJob}", propagate: false,
                        parameters: [
                          [$class: 'StringParameterValue', name: 'image', value: "${params.image}"],
                          [$class: 'StringParameterValue', name: 'buildID', value: "${params.buildID}"],
                          [$class: 'StringParameterValue', name: 'resultsPath', value: "${params.resultsPath}"]
                        ]
                    )
                    if(build.result == "SUCCESS") {
                      buildResults."vulnix" = "SUCCESS"
                      echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                    } else {
                      catchError(stageResult: 'FAILURE', buildResult: 'FAILURE'){
                                    error("Vulnix build failed")
                      }
                    }
                }
            }
        }

        stage('Nuc Tests') {
            steps {
                script {
                    build = build(
                        job: "${nucJob}", propagate: false,
                        parameters: [
                          [$class: 'StringParameterValue', name: 'image', value: "${params.image}"],
                          [$class: 'StringParameterValue', name: 'buildID', value: "${params.buildID}"],
                          [$class: 'StringParameterValue', name: 'resultsPath', value: "${params.resultsPath}"]
                        ]
                    )
                    if(build.result == "SUCCESS") {
                      buildResults."nuc" = "SUCCESS"
                      echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                    } else {
                      catchError(stageResult: 'FAILURE', buildResult: 'FAILURE'){
                                    error("NUC testset build failed")
                      }
                    }
                }
            }
        }
        stage('Add post processing timestamp to .json file and create index.html') {
            steps {
              dir("spectrum-jenkins/") {
                  sh "python3 addtimestamp/add_timestamp.py ${params.resultsPath}/${params.buildID} ${params.buildID}.json"
              }
            }
        }
        stage('Create index.html and bublish reports') {
            steps {
               dir("${params.resultsPath}/"){
                  sh "python3 ~/Jenkins-agent/workspace/Spectrum_OS/post_processing_nuc/spectrum-jenkins/indexer/indexer.py ${params.buildID}"
                  sh "scp -s -i ~/.ssh/sftpid_ed25519 -r ${params.buildID} sftp_user@95.175.105.23:/upload"
                  sh "ssh -i ~/.ssh/trigid_ed25519 script_trigger@95.175.105.23 -- --index ./${params.buildID}"
               }
            }
        }
    }
}

