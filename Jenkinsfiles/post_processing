#!groovy
// SPDX-FileCopyrightText: 2022-2023 Technology Innovation Institute (TII)
// SPDX-License-Identifier: Apache-2.0

vulnixJob = ''
sbomJob = ''
vulnsdiffJob = ''
provenanceJob = ''
testJob = ''
level = ''
deviceName = ''
sigVerfJob = ''

pipeline {
    agent {label "${params.label}"}
    stages {
        stage('Set variables') {
            steps {
                script {
                    def splitted = "${JOB_NAME}".split('/')
                    vulnixJob = "${splitted[0]}/Supply_chain_security/vulnix"
                    sbomJob = "${splitted[0]}/Supply_chain_security/sbomnix"
                    vulnsdiffJob = "${splitted[0]}/Supply_chain_security/vulnsdiff"
                    provenanceJob = "${splitted[0]}/Supply_chain_security/provenance"
                    level = "${splitted[0]}"
                    testJob = "${splitted[0]}/Testing/hw_test_set"
                    sigVerfJob = "${splitted[0]}/Supply_chain_security/signature_verification"
                    currentBuild.description = "${params.server} ${params.device} BuildID: ${params.buildID}"
                }
             }
        }
        stage('Output signature verification') {
            steps {
                script {
                    def buildData = readJSON file: "${params.resultsPath}/${params.buildID}/${params.buildID}.json"
                    def signature_file = "${buildData['Outputs'][0]['signature']}"
                    build = build(
                        job: "${sigVerfJob}",
                        parameters: [
                            [$class: 'StringParameterValue', name: 'path_to_check', value: "${params.outputPath}"],
                            [$class: 'StringParameterValue', name: 'signature_file', value: "${signature_file}"],
                            [$class: 'StringParameterValue', name: 'pem_file', value: "${params.server}.pem"]
                        ]
                    )
                    if(build.result == "SUCCESS") {
                        echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                    } else {
                        catchError(stageResult: 'FAILURE', buildResult: 'FAILURE') {
                            error("Signature verification failed!!!")
                        }
                    }
                }
            }
        }
        stage('Provenance signature verification') {
            steps {
                script {
                    def buildData = readJSON file: "${params.resultsPath}/${params.buildID}/${params.buildID}.json"
                    def provenancePath = "${buildData['Provenance']['path']}"
                    def signature_file = "${buildData['Provenance']['signature']}"

                    build = build(
                        job: "${sigVerfJob}",
                        parameters: [
                            [$class: 'StringParameterValue', name: 'path_to_check', value: "${provenancePath}"],
                            [$class: 'StringParameterValue', name: 'signature_file', value: "${signature_file}"],
                            [$class: 'StringParameterValue', name: 'pem_file', value: "${params.server}.pem"]
                        ]
                    )
                    if(build.result == "SUCCESS") {
                        echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                        // copy provenance file signature to results directory
                        sh "cp ${signature_file} ${params.resultsPath}/${params.buildID}/"
                    } else {
                        catchError(stageResult: 'FAILURE', buildResult: 'FAILURE') {
                            error("Signature verification failed!!!")
                        }
                    }
                }
            }
        }
        stage('vulnix') {
            steps {
                script {
                    build = build(
                        job: "${vulnixJob}", propagate: false,
                        parameters: [
                            [$class: 'StringParameterValue', name: 'outputPath', value: "${params.outputPath}"],
                            [$class: 'StringParameterValue', name: 'buildID', value: "${params.buildID}"],
                            [$class: 'StringParameterValue', name: 'resultsPath', value: "${params.resultsPath}"]
                        ]
                    )
                    if(build.result == "SUCCESS") {
                        echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                    } else {
                        catchError(stageResult: 'FAILURE', buildResult: 'FAILURE') {
                            error("Vulnix build failed")
                        }
                    }
                }
            }
        }
        stage('sbomnix') {
            steps {
                script {
                    build = build(
                        job: "${sbomJob}", propagate: false,
                        parameters: [
                            [$class: 'StringParameterValue', name: 'outputPath', value: "${params.outputPath}"],
                            [$class: 'StringParameterValue', name: 'buildID', value: "${params.buildID}"],
                            [$class: 'StringParameterValue', name: 'resultsPath', value: "${params.resultsPath}"]
                        ]
                    )
                    if(build.result == "SUCCESS") {
                        echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                    } else {
                        catchError(stageResult: 'FAILURE', buildResult: 'FAILURE') {
                            error("sbom build failed")
                        }
                    }
                }
            }
        }
        stage('vulnsdiff') {
            steps {
                script {
                    if ("${params.project}".contains("ghaf-scs-test")) {
                        build = build(
                            job: "${vulnsdiffJob}", propagate: false,
                            parameters: [
                                [$class: 'StringParameterValue', name: 'vulns_csv_baseline_path', value: "${params.vulns_csv_baseline_path}"],
                                [$class: 'StringParameterValue', name: 'buildID', value: "${params.buildID}"],
                                [$class: 'StringParameterValue', name: 'resultsPath', value: "${params.resultsPath}"]
                            ]
                        )
                        if(build.result == "SUCCESS") {
                            echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                        } else {
                            catchError(stageResult: 'FAILURE', buildResult: 'FAILURE') {
                                error("vulnsdiff build failed")
                            }
                        }
                    }
                }
            }
        }
        stage('HW Tests') {
            steps {
                script {
                    if(params.hw_tests) {
                        build = build(
                            job: "${testJob}", propagate: false,
                            parameters: [
                                [$class: 'StringParameterValue', name: 'image', value: "${params.outputPath}/nixos.img"],
                                [$class: 'StringParameterValue', name: 'buildID', value: "${params.buildID}"],
                                [$class: 'StringParameterValue', name: 'resultsPath', value: "${params.resultsPath}"],
                                [$class: 'StringParameterValue', name: 'server', value: "${params.server}"],
                                [$class: 'StringParameterValue', name: 'label', value: "${params.label}"],
                                [$class: 'StringParameterValue', name: 'device', value: "${params.device}"]
                            ]
                        )
                        if(build.result == "SUCCESS") {
                            echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                        } else {
                            catchError(stageResult: 'FAILURE', buildResult: 'FAILURE') {
                                error("${params.device} testset build failed")
                            }
                        }
                    } else {
                        println("No HW tests for this build!")
                    }
                }
            }
        }
        stage('Add post processing timestamp to .json file and create index.html') {
            steps {
                script {
                    sh "python3 addtimestamp/add_timestamp.py ${params.resultsPath}/${params.buildID} ${params.buildID}.json"
                }
            }
        }
        stage('Create index.html and publish reports') {
            steps {
                dir("${params.resultsPath}/"){
                    script {
                        sh "python3 ~/Jenkins-agent/workspace/${level}/post_processing/indexer/indexer.py /files/images/ /webify/build_reports ${params.buildID}"
                        if (params.upload) {
                            def webserver = (params.development) ? "test.vedenemo.dev" : "vedenemo.dev"
                            def sftp_user = (params.development) ? "test_sftp" : "sftp_user"
                            def trigger_user = (params.development) ? "test_trigger" : "script_trigger"
                            sh  "~/Jenkins-agent/workspace/${level}/post_processing/Jenkinsfiles/upload_dir_creation.sh ${params.server} ~/.ssh/sftpid_ed25519 22 ${sftp_user} ${webserver} ${params.buildID} ${trigger_user} ~/.ssh/trigid_ed25519"
                        }
                    }
                }
            }
        }
    }
}
