#!groovy
// SPDX-FileCopyrightText: 2022-2023 Technology Innovation Institute (TII)
// SPDX-License-Identifier: Apache-2.0

buildResults = [:]

vulnixJob = 'nixOS/Supply_chain_security/vulnix'
sbomJob = 'nixOS/Supply_chain_security/sbomnix'
vulnsdiffJob = 'nixOS/Supply_chain_security/vulnsdiff'
// testJob = 'nixOS/Testing/Orin_arm/orin_arm_test_set'

pipeline {
    agent {label 'tc-agent02'}
    stages {
        stage('vulnix') {
            steps {
                script {
                    currentBuild.description = "${params.server} Orin BuildID: ${params.buildID}"
                    build = build(
                        job: "${vulnixJob}", propagate: false,
                        parameters: [
                          [$class: 'StringParameterValue', name: 'image', value: "${params.image}"],
                          [$class: 'StringParameterValue', name: 'buildID', value: "${params.buildID}"],
                          [$class: 'StringParameterValue', name: 'resultsPath', value: "${params.resultsPath}"]
                        ]
                    )
                    if(build.result == "SUCCESS") {
                      buildResults."vulnix" = "SUCCESS"
                      echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                    } else {
                      catchError(stageResult: 'FAILURE', buildResult: 'FAILURE'){
                                    error("Vulnix build failed")
                      }
                    }
                }
            }
        }
        stage('sbomnix') {
            steps {
                script {
                    build = build(
                        job: "${sbomJob}", propagate: false,
                        parameters: [
                          [$class: 'StringParameterValue', name: 'image', value: "${params.image}"],
                          [$class: 'StringParameterValue', name: 'buildID', value: "${params.buildID}"],
                          [$class: 'StringParameterValue', name: 'resultsPath', value: "${params.resultsPath}"]
                        ]
                    )
                    if(build.result == "SUCCESS") {
                      buildResults."sbom" = "SUCCESS"
                      echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                    } else {
                      catchError(stageResult: 'FAILURE', buildResult: 'FAILURE'){
                                    error("sbom build failed")
                      }
                    }
                }
            }
        }
        stage('vulnsdiff') {
            steps {
                script {
                   if ("${params.project}".contains("ghaf-scs-test")) {
                      build = build(
                          job: "${vulnsdiffJob}", propagate: false,
                          parameters: [
                            [$class: 'StringParameterValue', name: 'vulns_csv_baseline_path', value: "${params.vulns_csv_baseline_path}"],
                            [$class: 'StringParameterValue', name: 'buildID', value: "${params.buildID}"],
                            [$class: 'StringParameterValue', name: 'resultsPath', value: "${params.resultsPath}"]
                          ]
                      )
                      if(build.result == "SUCCESS") {
                        buildResults."vulnsdiff" = "SUCCESS"
                        echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                      } else {
                        catchError(stageResult: 'FAILURE', buildResult: 'FAILURE'){
                                      error("vulnsdiff build failed")
                        }
                      }
                   }
                }
            }
        }
        // stage('Orin Tests') {
        //     steps {
        //         script {
        //             build = build(
        //                 job: "${testJob}", propagate: false,
        //                 parameters: [
        //                   [$class: 'StringParameterValue', name: 'image', value: "${params.image}"],
        //                   [$class: 'StringParameterValue', name: 'buildID', value: "${params.buildID}"],
        //                   [$class: 'StringParameterValue', name: 'resultsPath', value: "${params.resultsPath}"]
        //                 ]
        //             )
        //             if(build.result == "SUCCESS") {
        //               buildResults."orin" = "SUCCESS"
        //               echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
        //             } else {
        //               catchError(stageResult: 'FAILURE', buildResult: 'FAILURE'){
        //                             error("Orin testset build failed")
        //               }
        //             }
        //         }
        //     }
        // }
        stage('Add post processing timestamp to .json file and create index.html') {
            steps {
              script {
                  sh "python3 addtimestamp/add_timestamp.py ${params.resultsPath}/${params.buildID} ${params.buildID}.json"
              }
            }
        }
        stage('Create index.html and bublish reports') {
            steps {
               dir("${params.resultsPath}/"){
                  sh "python3 ~/Jenkins-agent/workspace/nixOS/post_processing_orin/indexer/indexer.py images/hydra/orin build_reports/hydra  ${params.buildID}"
                  sh "scp -s -i ~/.ssh/sftpid_ed25519 -r ${params.buildID} sftp_user@95.175.105.23:/upload/build_reports/hydra/${params.buildID}"
                  sh "ssh -i ~/.ssh/trigid_ed25519 script_trigger@95.175.105.23 -- --index build_reports/hydra/${params.buildID}"
               }
            }
        }
    }
}
